1 что такое промис?
2 что такое async await?
3 что такое context.this?
4 что такое замыкание?
5 зачем нужны стрелочные функции
------------------------------------------1------------------------------------
Промисы –  удобный способ организации асинхронного кода , и 
это специальный объект, который содержит своё состояние.
Вначале он ожидает  (pending) 
При успешном выполнении он выводит: onFulfilled(выполнен успешно) 
При ошибке:onRejected(выполнен с ошибкой)

promise.then(onFulfilled, onRejected)

onFulfilled – функция, которая будет вызвана с результатом при resolve.
onRejected – функция, которая будет вызвана с ошибкой при reject.

------------------------------------------2---------------------------------------

Async эта функция всегда возвращает promis

Например:
async function f() {
  return Nurislam;
}
f().then(alert);
Здесь эта функция возвратит выполненный промис с результатом Nurislam

await заставит JavaScript ждать до тех пор
пока промис справа от await не выполнится
После чего оно вернёт его результат, 
и выполнение кода продолжится.

Например:
async function f() {

  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("готово!"), 1000)
  });
  let result = await promise; 
  alert(result);
}
f();
Здесь промис успешно выполнится через 1 секунду


---------------------------------------------3-------------------------------------------


This — это ключевое слово, используемое в JavaScript,
и это переменная, которая ссылается на текущий обьект

Если мы напишем
console.log(this)
и посмотрим в браузер, то мы увидим, что у нас вывелся обьект window.
и это означает что this ссылается на текущий обьект. 
И текущий обьект у нас - window.

Пример:
class Transport {
    constructor(name,length, weight, color) {
        this.name = name
        this.length = length
        this.weight = weight
        this.color = color
    }
}

class Car extends Transport {
    constructor(name, length, weight, color, model, engine, speed) {
        super(name, length, weight, color);
        this.model = model
        this.engine = engine
        this.speed = speed
    }

    startEngine () {
        console.log(this.model)
        console.log(this.engine)
        console.log(this.speed)
    }

}

const car = new Car ("Maclaren720s", 3.5, "1.2тонн", "darkgrey",
    "720s", "800 лошадиных сил", "520 км/ч")
console.log(car)
car.startEngine()


------------------------------------------4-------------------------------------------------
Замыкание — это комбинация функции и лексического окружения,
 в котором эта функция была определена. Другими словами,
  замыкание даёт вам доступ к Scope (en-US) внешней функции из внутренней функции.
   В JavaScript замыкания создаются каждый раз при создании функции, во время её создания.
В JavaScript замыкания создаются каждый раз при создании функции,
во время её создания


const person()=> {
 let name = 'Peter';

 return function displayName() {
   console.log(name);
 };
}
let peter = person();
peter();





-----------------------------------------5-----------------------------------------------------
Чтобы не повторять один и тот же код во многих местах, придуманы функции.
Функции являются основными «строительными блоками» программы.

// функции 
Пример:
function showMessage(){
    console.log('привет')
}
showMessage();


Функции начинающийся с
show... - обычно  что то показывает,
get... - возращяет значения,
calc... - что то вычесляют,
create... - что то создают,
check... - что то проверяет и возврящяет логическое значение итд

Стрелочные функции, призваны упростить написание кода и облегчить жизнь.
и стрелочные функции вышли с es6 они более упрощают код у стрелочного функции нет имени
оно выглядит так = () =>

Пример:
const showMessage =() =>{
    console.log('привет')
}
showMessage();
-----------------------------------------------------------------------------------------------------------